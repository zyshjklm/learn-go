// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: addrbookstore.proto

/*
	Package rpcproto is a generated protocol buffer package.

	It is generated from these files:
		addrbookstore.proto

	It has these top-level messages:
		PhoneNumber
		Person
		AddrBook
		AddPersonRequest
		AddPersonResponse
*/
package rpcproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PhoneType int32

const (
	PhoneType_MOBILE PhoneType = 0
	PhoneType_HOME   PhoneType = 1
	PhoneType_WORK   PhoneType = 2
)

var PhoneType_name = map[int32]string{
	0: "MOBILE",
	1: "HOME",
	2: "WORK",
}
var PhoneType_value = map[string]int32{
	"MOBILE": 0,
	"HOME":   1,
	"WORK":   2,
}

func (x PhoneType) String() string {
	return proto.EnumName(PhoneType_name, int32(x))
}
func (PhoneType) EnumDescriptor() ([]byte, []int) { return fileDescriptorAddrbookstore, []int{0} }

type PhoneNumber struct {
	Number string    `protobuf:"bytes,1,opt,name=number,proto3" json:"number,omitempty"`
	Type   PhoneType `protobuf:"varint,2,opt,name=type,proto3,enum=rpcproto.PhoneType" json:"type,omitempty"`
}

func (m *PhoneNumber) Reset()                    { *m = PhoneNumber{} }
func (m *PhoneNumber) String() string            { return proto.CompactTextString(m) }
func (*PhoneNumber) ProtoMessage()               {}
func (*PhoneNumber) Descriptor() ([]byte, []int) { return fileDescriptorAddrbookstore, []int{0} }

func (m *PhoneNumber) GetNumber() string {
	if m != nil {
		return m.Number
	}
	return ""
}

func (m *PhoneNumber) GetType() PhoneType {
	if m != nil {
		return m.Type
	}
	return PhoneType_MOBILE
}

type Person struct {
	Id     int32          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name   string         `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Email  string         `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	Phones []*PhoneNumber `protobuf:"bytes,4,rep,name=phones" json:"phones,omitempty"`
}

func (m *Person) Reset()                    { *m = Person{} }
func (m *Person) String() string            { return proto.CompactTextString(m) }
func (*Person) ProtoMessage()               {}
func (*Person) Descriptor() ([]byte, []int) { return fileDescriptorAddrbookstore, []int{1} }

func (m *Person) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Person) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Person) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *Person) GetPhones() []*PhoneNumber {
	if m != nil {
		return m.Phones
	}
	return nil
}

type AddrBook struct {
	People []*Person `protobuf:"bytes,1,rep,name=people" json:"people,omitempty"`
}

func (m *AddrBook) Reset()                    { *m = AddrBook{} }
func (m *AddrBook) String() string            { return proto.CompactTextString(m) }
func (*AddrBook) ProtoMessage()               {}
func (*AddrBook) Descriptor() ([]byte, []int) { return fileDescriptorAddrbookstore, []int{2} }

func (m *AddrBook) GetPeople() []*Person {
	if m != nil {
		return m.People
	}
	return nil
}

type AddPersonRequest struct {
	Person *Person `protobuf:"bytes,1,opt,name=person" json:"person,omitempty"`
}

func (m *AddPersonRequest) Reset()                    { *m = AddPersonRequest{} }
func (m *AddPersonRequest) String() string            { return proto.CompactTextString(m) }
func (*AddPersonRequest) ProtoMessage()               {}
func (*AddPersonRequest) Descriptor() ([]byte, []int) { return fileDescriptorAddrbookstore, []int{3} }

func (m *AddPersonRequest) GetPerson() *Person {
	if m != nil {
		return m.Person
	}
	return nil
}

// return person id
type AddPersonResponse struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *AddPersonResponse) Reset()                    { *m = AddPersonResponse{} }
func (m *AddPersonResponse) String() string            { return proto.CompactTextString(m) }
func (*AddPersonResponse) ProtoMessage()               {}
func (*AddPersonResponse) Descriptor() ([]byte, []int) { return fileDescriptorAddrbookstore, []int{4} }

func (m *AddPersonResponse) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func init() {
	proto.RegisterType((*PhoneNumber)(nil), "rpcproto.PhoneNumber")
	proto.RegisterType((*Person)(nil), "rpcproto.Person")
	proto.RegisterType((*AddrBook)(nil), "rpcproto.AddrBook")
	proto.RegisterType((*AddPersonRequest)(nil), "rpcproto.AddPersonRequest")
	proto.RegisterType((*AddPersonResponse)(nil), "rpcproto.AddPersonResponse")
	proto.RegisterEnum("rpcproto.PhoneType", PhoneType_name, PhoneType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for AddrBookStore service

type AddrBookStoreClient interface {
	AddPerson(ctx context.Context, in *AddPersonRequest, opts ...grpc.CallOption) (*AddPersonResponse, error)
}

type addrBookStoreClient struct {
	cc *grpc.ClientConn
}

func NewAddrBookStoreClient(cc *grpc.ClientConn) AddrBookStoreClient {
	return &addrBookStoreClient{cc}
}

func (c *addrBookStoreClient) AddPerson(ctx context.Context, in *AddPersonRequest, opts ...grpc.CallOption) (*AddPersonResponse, error) {
	out := new(AddPersonResponse)
	err := grpc.Invoke(ctx, "/rpcproto.AddrBookStore/AddPerson", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AddrBookStore service

type AddrBookStoreServer interface {
	AddPerson(context.Context, *AddPersonRequest) (*AddPersonResponse, error)
}

func RegisterAddrBookStoreServer(s *grpc.Server, srv AddrBookStoreServer) {
	s.RegisterService(&_AddrBookStore_serviceDesc, srv)
}

func _AddrBookStore_AddPerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPersonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddrBookStoreServer).AddPerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcproto.AddrBookStore/AddPerson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddrBookStoreServer).AddPerson(ctx, req.(*AddPersonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AddrBookStore_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpcproto.AddrBookStore",
	HandlerType: (*AddrBookStoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddPerson",
			Handler:    _AddrBookStore_AddPerson_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "addrbookstore.proto",
}

func (m *PhoneNumber) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PhoneNumber) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Number) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAddrbookstore(dAtA, i, uint64(len(m.Number)))
		i += copy(dAtA[i:], m.Number)
	}
	if m.Type != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAddrbookstore(dAtA, i, uint64(m.Type))
	}
	return i, nil
}

func (m *Person) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Person) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAddrbookstore(dAtA, i, uint64(m.Id))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAddrbookstore(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Email) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAddrbookstore(dAtA, i, uint64(len(m.Email)))
		i += copy(dAtA[i:], m.Email)
	}
	if len(m.Phones) > 0 {
		for _, msg := range m.Phones {
			dAtA[i] = 0x22
			i++
			i = encodeVarintAddrbookstore(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AddrBook) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddrBook) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.People) > 0 {
		for _, msg := range m.People {
			dAtA[i] = 0xa
			i++
			i = encodeVarintAddrbookstore(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AddPersonRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddPersonRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Person != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAddrbookstore(dAtA, i, uint64(m.Person.Size()))
		n1, err := m.Person.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *AddPersonResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddPersonResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAddrbookstore(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func encodeFixed64Addrbookstore(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Addrbookstore(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintAddrbookstore(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *PhoneNumber) Size() (n int) {
	var l int
	_ = l
	l = len(m.Number)
	if l > 0 {
		n += 1 + l + sovAddrbookstore(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovAddrbookstore(uint64(m.Type))
	}
	return n
}

func (m *Person) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovAddrbookstore(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAddrbookstore(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovAddrbookstore(uint64(l))
	}
	if len(m.Phones) > 0 {
		for _, e := range m.Phones {
			l = e.Size()
			n += 1 + l + sovAddrbookstore(uint64(l))
		}
	}
	return n
}

func (m *AddrBook) Size() (n int) {
	var l int
	_ = l
	if len(m.People) > 0 {
		for _, e := range m.People {
			l = e.Size()
			n += 1 + l + sovAddrbookstore(uint64(l))
		}
	}
	return n
}

func (m *AddPersonRequest) Size() (n int) {
	var l int
	_ = l
	if m.Person != nil {
		l = m.Person.Size()
		n += 1 + l + sovAddrbookstore(uint64(l))
	}
	return n
}

func (m *AddPersonResponse) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovAddrbookstore(uint64(m.Id))
	}
	return n
}

func sovAddrbookstore(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozAddrbookstore(x uint64) (n int) {
	return sovAddrbookstore(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PhoneNumber) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAddrbookstore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PhoneNumber: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PhoneNumber: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddrbookstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAddrbookstore
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Number = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddrbookstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (PhoneType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAddrbookstore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAddrbookstore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Person) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAddrbookstore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Person: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Person: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddrbookstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddrbookstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAddrbookstore
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddrbookstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAddrbookstore
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phones", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddrbookstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAddrbookstore
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phones = append(m.Phones, &PhoneNumber{})
			if err := m.Phones[len(m.Phones)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAddrbookstore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAddrbookstore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddrBook) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAddrbookstore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddrBook: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddrBook: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field People", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddrbookstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAddrbookstore
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.People = append(m.People, &Person{})
			if err := m.People[len(m.People)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAddrbookstore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAddrbookstore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddPersonRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAddrbookstore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddPersonRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddPersonRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Person", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddrbookstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAddrbookstore
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Person == nil {
				m.Person = &Person{}
			}
			if err := m.Person.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAddrbookstore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAddrbookstore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddPersonResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAddrbookstore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddPersonResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddPersonResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAddrbookstore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAddrbookstore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAddrbookstore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAddrbookstore(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAddrbookstore
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAddrbookstore
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAddrbookstore
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthAddrbookstore
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAddrbookstore
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAddrbookstore(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAddrbookstore = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAddrbookstore   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("addrbookstore.proto", fileDescriptorAddrbookstore) }

var fileDescriptorAddrbookstore = []byte{
	// 338 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0xcd, 0x4e, 0xc2, 0x40,
	0x10, 0xc7, 0xd9, 0x52, 0x1a, 0x3a, 0x44, 0x52, 0x07, 0x35, 0x0d, 0x26, 0x0d, 0xa9, 0x07, 0x1b,
	0x8d, 0x1c, 0xd0, 0xa3, 0x17, 0x88, 0x24, 0x1a, 0xe5, 0x23, 0xab, 0xc6, 0x33, 0xb8, 0x9b, 0x48,
	0x80, 0xee, 0xb2, 0x2d, 0x07, 0xde, 0xc4, 0x47, 0xf2, 0xe8, 0x23, 0x18, 0x7c, 0x11, 0xd3, 0x6d,
	0x41, 0xd2, 0xe8, 0xa9, 0xff, 0xf9, 0xf8, 0xcd, 0xfc, 0xa7, 0x0b, 0xb5, 0x11, 0x63, 0x6a, 0x2c,
	0xc4, 0x34, 0x8a, 0x85, 0xe2, 0x4d, 0xa9, 0x44, 0x2c, 0xb0, 0xac, 0xe4, 0xab, 0x56, 0x7e, 0x1f,
	0x2a, 0xc3, 0x37, 0x11, 0xf2, 0xfe, 0x72, 0x3e, 0xe6, 0x0a, 0x8f, 0xc0, 0x0a, 0xb5, 0x72, 0x49,
	0x83, 0x04, 0x36, 0xcd, 0x22, 0x3c, 0x05, 0x33, 0x5e, 0x49, 0xee, 0x1a, 0x0d, 0x12, 0x54, 0x5b,
	0xb5, 0xe6, 0x86, 0x6f, 0x6a, 0xf8, 0x69, 0x25, 0x39, 0xd5, 0x0d, 0xfe, 0x02, 0xac, 0x21, 0x57,
	0x91, 0x08, 0xb1, 0x0a, 0xc6, 0x84, 0xe9, 0x31, 0x25, 0x6a, 0x4c, 0x18, 0x22, 0x98, 0xe1, 0x68,
	0x9e, 0x8e, 0xb0, 0xa9, 0xd6, 0x78, 0x00, 0x25, 0x3e, 0x1f, 0x4d, 0x66, 0x6e, 0x51, 0x27, 0xd3,
	0x00, 0x2f, 0xc0, 0x92, 0xc9, 0xd8, 0xc8, 0x35, 0x1b, 0xc5, 0xa0, 0xd2, 0x3a, 0xcc, 0xad, 0x4b,
	0xbd, 0xd2, 0xac, 0xc9, 0xbf, 0x82, 0x72, 0x9b, 0x31, 0xd5, 0x11, 0x62, 0x8a, 0x01, 0x58, 0x92,
	0x0b, 0x39, 0xe3, 0x2e, 0xd1, 0xa8, 0xb3, 0x83, 0x6a, 0x5b, 0x34, 0xab, 0xfb, 0xd7, 0xe0, 0xb4,
	0x19, 0xcb, 0x92, 0x7c, 0xb1, 0xe4, 0x51, 0x9c, 0xd2, 0x49, 0x42, 0xdb, 0xfe, 0x87, 0x4e, 0xbe,
	0xfe, 0x09, 0xec, 0xef, 0xd0, 0x91, 0x14, 0x61, 0xc4, 0xf3, 0x17, 0x9f, 0x9d, 0x83, 0xbd, 0xfd,
	0x3d, 0x08, 0x60, 0xf5, 0x06, 0x9d, 0xbb, 0x87, 0xae, 0x53, 0xc0, 0x32, 0x98, 0xb7, 0x83, 0x5e,
	0xd7, 0x21, 0x89, 0x7a, 0x19, 0xd0, 0x7b, 0xc7, 0x68, 0x3d, 0xc3, 0xde, 0xe6, 0x8a, 0xc7, 0xe4,
	0xa5, 0xf0, 0x06, 0xec, 0xed, 0x0a, 0xac, 0xff, 0x3a, 0xc9, 0xbb, 0xae, 0x1f, 0xff, 0x59, 0x4b,
	0x3d, 0x75, 0x9c, 0x8f, 0xb5, 0x47, 0x3e, 0xd7, 0x1e, 0xf9, 0x5a, 0x7b, 0xe4, 0xfd, 0xdb, 0x2b,
	0x8c, 0x2d, 0xdd, 0x7a, 0xf9, 0x13, 0x00, 0x00, 0xff, 0xff, 0x3f, 0x9e, 0xc8, 0xee, 0x19, 0x02,
	0x00, 0x00,
}
